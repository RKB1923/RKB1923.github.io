<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rodney Bautista]]></title>
  <link href="http://RKB1923.github.io/atom.xml" rel="self"/>
  <link href="http://RKB1923.github.io/"/>
  <updated>2014-02-10T19:04:21-07:00</updated>
  <id>http://RKB1923.github.io/</id>
  <author>
    <name><![CDATA[Rodney Bautista]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git It On - Part 1]]></title>
    <link href="http://RKB1923.github.io/blog/2014/02/10/git-it-on/"/>
    <updated>2014-02-10T15:10:09-07:00</updated>
    <id>http://RKB1923.github.io/blog/2014/02/10/git-it-on</id>
    <content type="html"><![CDATA[<p>In our third class, <a href="http://contributors.rubyonrails.org/contributors/jason-noble/commits">Jason Noble</a> introduced us to git and github, working directories, staging areas,
remote repositories, masters, branches, forks, and other git goodness. For most beginners, this is where
their heads start spinning and they think about giving up. Luckily for me, I&rsquo;ve been immersed in the lexicon
at work and Jason is an excellent teacher.</p>

<p>Essential to understanding git as a version control system is the following image:</p>

<p><img class="center" src="http://RKB1923.github.io/images/git.png" title="image" alt="images"></p>

<p>Traditionally, most version control systems only have the working directory and the git directory (which I will
refer to as the master repository- the all-important customer-facing code of your app or website). When you were
ready to permanently make the changes, you simply just pushed the changes that you made locally to the master
repository.</p>

<p>If you&rsquo;ve ever used Microsoft Word and saved a document, you were doing something similar. You had
a master version that was previously saved and when you hit save again, you were sort of pushing your recent
changes into that master version (though in actuality you were just overwriting the previous version).</p>

<p>One of the special features of Git is a &ldquo;staging area.&rdquo; This layer sits between your working directory and the
master repository. While working with your code, you can &ldquo;stage files&rdquo; or push code into this staging area as
much as you want and, when you&rsquo;re satisfied, commit your code into the master repository. This provides several
advantages:</p>

<pre><code>1. You can work on several different code features in parallel.
2. You can build up your commits any way you want and prioritize them however you want.
3. Other people checking out the project can do so without your changes committed.
</code></pre>

<p>GitHub, along with other third-parties, are simply hosts for your master repository.</p>

<p>In my next post, I&rsquo;ll cover the basics of how to stage and commit in your terminal on OSX.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Command Line Basics]]></title>
    <link href="http://RKB1923.github.io/blog/2014/02/08/command-line-basics/"/>
    <updated>2014-02-08T09:07:24-07:00</updated>
    <id>http://RKB1923.github.io/blog/2014/02/08/command-line-basics</id>
    <content type="html"><![CDATA[<p>Yesterday, I finally took advantage of one perk of the <a href="http://www.davinciinstitute.com">DaVinci Institute</a>: 24-hour access to the
classroom to work or study. I&rsquo;m proud to say that I studied from about 9pm to 2am the next morning
studying command-line.</p>

<p><a href="http://contributors.rubyonrails.org/contributors/jason-noble/commits">Jason</a> has us going through <a href="http://cli.learncodethehardway.org">The CLI Crash Course</a> from <a href="http://learncodethehardway.org">Learn Code the Hard Way</a>. The domain
definitely earns its name. <a href="http://zedshaw.com/#/start">Zed A. Shaw&rsquo;s</a> only piece of advice is one he makes clear in the introduction
of the book:</p>

<p><strong>Shut up and type all of this in.</strong></p>

<p>He continues with one of the main tenets of his courses on <a href="http://learncodethehardway.org">Learn Code the Hard Way</a>, which is
that you start off with rote memorization. In time, this turns into natural recognition and understanding.</p>

<p>For example, when learning the command &ldquo;mkdir,&rdquo; you will are prompted to make 20 directories in different
hierarchies.</p>

<p>Is this worth it? I would say, &ldquo;Yes!&rdquo; Having poked around in command-line with basic understanding, I
can say that going through just the first portion of this instruction has made me a better command-line
ninja.</p>

<p><a href="http://zedshaw.com/#/start">Zed A. Shaw</a> is right: &ldquo;Many students don&rsquo;t know how to use the basics of the command line
and it [gets] in the way of the their learning.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DaVinci Institute: First Day of Class]]></title>
    <link href="http://RKB1923.github.io/blog/2014/02/03/first-day-of-class/"/>
    <updated>2014-02-03T20:37:45-07:00</updated>
    <id>http://RKB1923.github.io/blog/2014/02/03/first-day-of-class</id>
    <content type="html"><![CDATA[<p>Today, I began my journey into the world of Ruby on Rails under the instruction of Ruby on Rails
contributor <a href="http://contributors.rubyonrails.org/contributors/jason-noble/commits">Jason Noble</a> at <a href="http://www.davinciinstitute.com">The DaVinci Instiute</a> in Louisville, CO. Our first in-class task
was to make this Octopress blog. We created our first post with embedded code.</p>

<p>Here are two snippets of markdown using three backticks to use
Github&rsquo;s formatting:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo make me_a_sandwich</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Cat class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Cat</span>
</span><span class='line'> <span class="k">def</span> <span class="nf">speak</span>
</span><span class='line'>  <span class="s2">&quot;Meow&quot;</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here is a snippet using a gist we created in class:</p>

<div><script src='https://gist.github.com/8797944.js'></script>
<noscript><pre><code>Class Dog
 def speak
  &quot;Bark&quot;
 end
end
</code></pre></noscript></div>


<p>All-in-all, a very exciting start.</p>
]]></content>
  </entry>
  
</feed>
